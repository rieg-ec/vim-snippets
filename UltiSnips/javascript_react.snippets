extends html, css, javascript

global !p
# Capitalize the first letter without affecting the rest of the letters
def capitalize_first(word):
	if(word):
		word = word[0].upper() + word[1:]
	return word
endglobal

# Functional components
snippet rfc "react functional component" b
import { useState } from "react"

export default function ${1:`!p snip.rv = snip.basename`}(${2}){
	return(
		<div>
			${3:<p>Body</p>}
		</div>
		)
}
endsnippet

snippet rfcn "react native functional component" b
import { useState } from "react"
import { View, Text } from 'react-native';

export default function ${1:`!p snip.rv = snip.basename`}(${2}){
	return(
		<View className="">
			${3:<Text>Body</Text>}
		</View>
	)
}
endsnippet

snippet rfsn "react native screen" b
import { useState } from 'react';
import { View, Text } from 'react-native';

import type { NativeStackScreenProps } from '@react-navigation/native-stack';
import type { RootStackParamList } from '../types';

type Props = NativeStackScreenProps<RootStackParamList, '${1:`!p snip.rv = snip.basename`}'>;

export default function ${2:`!p snip.rv = snip.basename`}({ navigation }: Props) {
	return (
		<View>
			<Text>Body</Text>
		</View>
	);
}
endsnippet

snippet rfcnf "react native functional component with formik form" b
import { View, Text, TouchableOpacity } from 'react-native';
import { Link } from '@react-navigation/native';
import { Formik } from 'formik';
import * as Yup from 'yup';

const ValidationSchema = Yup.object().shape({
	email: Yup.string().email('Invalid email').required('Required'),
	password: Yup
		.string()
		.required('Please enter your password.')
		.min(8, 'Password too short.'),
});

export default function ${1:`!p snip.rv = snip.basename`}(${2})() {
	return (
		<View className="flex flex-col h-full">
			<Formik
				initialValues={{ email: '', password: '' }}
				onSubmit={(values) => console.log(values)}
				validationSchema={ValidationSchema}
			>
				{({
					errors, handleChange, handleBlur, handleSubmit, values,
				}) => (
					<View className="flex flex-col space-y-4">
						<TextInput
							placeholder="Email"
							value={values.email}
							onChangeText={handleChange('email')}
							onBlur={handleBlur('email')}
						/>
						<TouchableOpacity
							onPress={handleSubmit}
							className=""
						>
							<Text className="text-base font-semibold">
								Submit
							</Text>
						</TouchableOpacity>
					</View>
				)}
			</Formik>
		</View>
	);
}
endsnippet

# React Hooks
snippet useS "useState Hook" b
const [${1}, set`!p snip.rv=capitalize_first(t[1])`] = useState(${3:"${4}"})
endsnippet
snippet useE "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet
snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet
snippet useRe "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet
snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet
snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet
snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet
snippet ir "import React"
import React from "react"
endsnippet
snippet irc "import React and Component"
import React, { Component } from "react"
endsnippet
