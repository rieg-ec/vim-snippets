extends html, javascript, css, reactnative, react

snippet rdiv
	<div className="${0}">
	</div>

snippet rspan
	<span className="${0}">
	</span>

snippet rp
	<p className="${0}">
	</p>

snippet ra
	<a
		href="#"
		className="${0}"
	>
	</a>

snippet rimg
	<img
		src={${0}}
		className="${1}"
	/>

snippet rbutton
	<button
		type="button"
		className="${0}"
		onClick={${1}}
	>
	</button>


snippet rinput
	<input
		type=""
		className="${0}"
		value={${1}}
		onChange={${2}}
	/>

# Import
snippet ir import React
	import React from 'react';

snippet irc import React and Component
	import React, { Component } from 'react';

snippet irh import React hooks
	import { use$1 } from 'react';

snippet ird import ReactDOM
	import ReactDOM from 'react-dom';

snippet irp import PropTypes
	import PropTypes from 'prop-types';

# Lifecycle Methods
snippet cdm componentDidMount
	componentDidMount() {
		${1}
	};

snippet cdup componentDidUpdate
	componentDidUpdate(prevProps, prevState) {
		${1}
	};

snippet cwm componentWillMount
	componentWillMount() {
		${1}
	};

snippet cwr componentWillReceiveProps
	componentWillReceiveProps(nextProps) {
		${1}
	};

snippet cwun componentWillUnmount
	componentWillUnmount() {
		${1}
	};

snippet cwu componentWillUpdate
	componentWillUpdate(nextProps, nextState) {
		${1}
	};

snippet scu shouldComponentUpdate
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}

# Props
snippet spt static propTypes
	static propTypes = {
		${1}: PropTypes.${2}
	};

snippet pt propTypes
	${1}.propTypes = {
		${2}: PropTypes.${2}
	};

snippet sdp static defaultProps
	static defaultProps = {
		${1}: ${2}
	};

snippet dp defaultProps
	${1}.defaultProps = {
		${2}: ${3}
	};

snippet pp props
	props.${1};

snippet tp this props
	this.props.${1};

# State
snippet st
	state = {
		${1}: ${2},
	};

snippet sst
	this.setState({
		${1}: ${2}
	});

snippet tst
	this.state.${1};

# Component
snippet raf
	const ${1:ComponentName} = (${2:props}) => {
		${3:state}

		return (
			<>
				${4}
			</>
		);
	};

snippet rcla
	class ${1:ClassName} extends Component {
		render() {
			return (
				<>
					${2}
				</>
			);
		}
	}

snippet ercla
	export default class ${1:ClassName} extends Component {
		render() {
			return (
				<>
					${2}
				</>
			);
		};
	};

snippet ctor
	constructor() {
		super();

		${1:state}
	}

snippet ren
	render() {
		return (
			<>
				${2}
			</>
		);
	}

snippet fup
	forceUpdate(${1:callback});

# Hooks
snippet uses useState
	const [${1:state}, set${2}] = useState(${3:initialState});

snippet usee useEffect
	useEffect(() => {
		${1}
	});

snippet userd useReducer
	const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});

snippet userf useRef
	const ${1:refContainer} = useRef(${2:initialValue});

snippet usect useContext
	const ${1:value} = useContext(${2:MyContext});

snippet usecb useCallback
	const ${1:memoizedCallback} = useCallback(
	() => {
		${2}(${3})
	},
	[$3]
	);

snippet usem useMemo
	const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);

snippet usei useImperativeHandle
	useImperativeHandle(${1:ref}, ${2:createHandle});

snippet used useDebugValue
	useDebugValue(${1:value});

# ReactDOM methods
snippet rdr ReactDOM.render
	ReactDOM.render(${1}, ${2});

snippet rdh ReactDOM.hydrate
	ReactDOM.hydrate(${1:element}, ${2:container}[, ${3:callback}]);

snippet rdcp ReactDOM.createPortal
	ReactDOM.createPortal(${1:child}, ${2:container});

##################### react native #####################
snippet exportnative
	import { useState } from 'react';
	import { View, Text } from 'react-native';

	export default function BaseText() {
		return (
			<View className="">
				<Text className="">
					Text
				</Text>
			</View>
		);
	}

snippet exportnativescreen export screen
	import { useState } from 'react';
	import { View, Text } from 'react-native';

	import type { NativeStackScreenProps } from '@react-navigation/native-stack';
	import type { RootStackParamList } from '../types';

	type Props = NativeStackScreenProps<RootStackParamList, 'ScreenName'>;

	export default function ScreenName({ navigation }: Props) {
		return (
			<View>
				<Text>Body</Text>
			</View>
		);
	}

snippet exportnativeformik export formik
	import { View, Text, TouchableOpacity } from 'react-native';
	import { Link } from '@react-navigation/native';
	import { Formik } from 'formik';
	import * as Yup from 'yup';

	const ValidationSchema = Yup.object().shape({
		email: Yup.string().email('Invalid email').required('Required'),
		password: Yup
			.string()
			.required('Please enter your password.')
			.min(8, 'Password too short.'),
	});

	export default function ScreenName() {
		return (
			<View className="flex flex-col h-full">
				<Formik
					initialValues={{ email: '', password: '' }}
					onSubmit={(values) => console.log(values)}
					validationSchema={ValidationSchema}
				>
					{({
						errors, handleChange, handleBlur, handleSubmit, values,
					}) => (
						<View className="flex flex-col space-y-4">
							<TextInput
								placeholder="Email"
								value={values.email}
								onChangeText={handleChange('email')}
								onBlur={handleBlur('email')}
							/>
							<TouchableOpacity
								onPress={handleSubmit}
								className=""
							>
								<Text className="text-base font-semibold">
									Submit
								</Text>
							</TouchableOpacity>
						</View>
					)}
				</Formik>
			</View>
		);
	}

snippet View
	<View className="${0}">
	</View>

snippet Text
	<Text className="${0}">
	</Text>

snippet Image
	<Image
		className="${0}"
		source={require('')}
	/>

snippet TextInput
	<TextInput
		className="${0}"
		onChangeText={}
		value={}
		placeholder=""
		keyboardType=""
	/>

snippet ScrollView
	<ScrollView className="${0}">
	</ScrollView>

snippet TouchableOpacity
	<TouchableOpacity
		className="${0}"
		onPress={onPress}
	>
		<Text className="${0}">Press Here</Text>
	</TouchableOpacity>

snippet Button
	<Button
		className="${0}"
		onPress={}
		title=""
	/>

snippet Switch
	<Switch
		className="${0}"
		trackColor={{ false: "#767577", true: "#81b0ff" }}
		thumbColor={"#f5dd4b"}
		ios_backgroundColor="#3e3e3e"
		onValueChange={toggleSwitch}
		value={isEnabled}
	/>

snippet ActivityIndicator
	<ActivityIndicator size="large" color="#00ff00" />

snippet Alert
	Alert.alert(
		"Alert Title",
		"My Alert Msg",
		[
			{
				text: "Ask me later",
				onPress: () => console.log("Ask me later pressed")
			},
			{
				text: "Cancel",
				onPress: () => console.log("Cancel Pressed"),
				style: "cancel"
			},
			{ text: "OK", onPress: () => console.log("OK Pressed") }
		]
	);

snippet Modal
	<Modal
		animationType="slide"
		transparent={true}
		visible={modalVisible}
		onRequestClose={() => {
			Alert.alert("Modal has been closed.");
			setModalVisible(!modalVisible);
		}}
	>
		<View className="${0}">
			<View className="${0}">
				<Text className="${0}">Hello World!</Text>
				<Pressable
					className="${0}"
					onPress={() => setModalVisible(!modalVisible)}
				>
					<Text className="${0}">Hide Modal</Text>
				</Pressable>
			</View>
		</View>
	</Modal>
